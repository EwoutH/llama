## Local lineage report

```python, name="import dependencies", echo=False
import matplotlib.pyplot as pyplot
import pandas as pd 
import os
import matplotlib.font_manager as font_manager
import matplotlib as mpl
from collections import defaultdict
import tabulate
import datetime as dt
import csv
import numpy as np
import scipy as sp

from reportfunk.funks import tree_functions as tree_viz
from reportfunk.funks import parsing_functions as dp
from reportfunk.funks import prep_data_functions as prep_data

import warnings
warnings.filterwarnings("ignore")

font_props = font_manager.FontProperties(family=["helvetica","sans-serif"])
a = matplotlib.font_manager.FontManager()
a.findfont(font_props, fallback_to_default=True)

pyplot.rcParams.update({'figure.max_open_warning': 0})

mpl.rcParams['font.weight']=50
mpl.rcParams['axes.labelweight']=50

```

```python, name = "insert_arguments", echo=False, results='raw'

filtered_db_metadata = "" ##CHANGE
input_csv = "" ##CHANGE
full_metadata_file = "" ##CHANGE
QC_fail_file = "" ##CHANGE
missing_seq_file = "" ##CHANGE
input_directory = "" ##CHANGE
output_directory = "" ##CHANGE
full_outdir = "" ## CHANGE
name_stem_input = "" ##CHANGE
summary_dir = "" ##CHANGE
figdir = "" ##CHANGE
tree_dir = "" ##CHANGE
tree_name_stem = "" ##CHANGE
input_name_column = "" ##CHANGE
database_name_column = "" ##CHANGE
colour_fields_input = "" ##CHANGE
label_fields_input = "" ##CHANGE
node_summary_option = "" ##CHANGE

```

```python, name="prep_args", echo=False
label_fields, colour_fields, name_stem = prep_data.prepping_llama_arguments(colour_fields_input, label_fields_input, name_stem_input)
```


```python, name="parse metadata", echo=False, results='raw'

present_in_tree, tip_to_tree = dp.parse_tree_tips(tree_dir)

query_dict, tree_to_tip = dp.parse_filtered_metadata(filtered_db_metadata, tip_to_tree) #Just the lines with their queries plus the closest match in db

if input_csv != '':
    query_dict = dp.parse_input_csv(input_csv, query_dict, input_name_column, colour_fields, label_fields) #Any query information they have provided

full_tax_dict = dp.parse_full_metadata(query_dict, full_metadata_file, tip_to_tree, present_in_tree, database_name_column, node_summary_option)
```

```python, name="QC fails", echo=False, results="raw"
count_fails = 0
count_missing = 0

with open(missing_seq_file) as f:
    for l in f:
        if "name" not in l:
            count_missing += 1

if QC_fail_file != "": 
    with open(QC_fail_file) as f:
        next(f)
        for l in f:
            count_fails += 1

if count_fails != 0 or count_missing != 0:
    if count_fails != 0:
        fail_dict = dp.investigate_QC_fails(QC_fail_file)
        if len(fail_dict) > 0:
            print("Failed QC:\n")
            for seq, reason in fail_dict.items():
                pretty_name = seq.replace("'","")
                pretty_reason = reason.replace("'","")
                print(" - " + pretty_name, pretty_reason)
    if count_missing != 0:
        print("\n")
        failed_names = dp.print_missing_seqs(missing_seq_file)
        print("Not found in the background data and no additional fasta file provided:\n")
        for i in failed_names:
            print(" - " + i.replace("'","")) 
```

```python, name="early descriptions", echo=False, results='tex'
number_seqs = len(query_dict)

db_number = 0
not_in_db_number = 0
for tax in query_dict.values():
    if tax.in_db:
        db_number += 1
    else:
        not_in_db_number += 1

print(str(number_seqs) + " sequences described in this report\n\n")

print(f" - {db_number} already in global tree\n - {not_in_db_number} added into local trees\n")



```

The table below is a summary of these sequences provided with metadata, along with the global lineage they have been assigned.

```python, name="first_table", echo=False, results="tex"

df = dp.make_initial_table(query_dict, colour_fields, label_fields)

print(df.to_markdown())
```

## Phylogenies

The nearest neighbours of each of the sequences of interest are shown below.
Underneath each tree is a bar chart describing the lineages present.


```python, name="make_trees", echo=False, include=False, figure=False
too_tall_trees, overall_tree_number, overall_df_dict, colour_dict_dict = tree_viz.make_all_of_the_trees(tree_dir, full_outdir,tree_name_stem, full_tax_dict, query_dict, colour_fields, label_fields)
``` 

```python, name="make_legend", echo=False, include=False, results='tex'
for trait, colour_dict in colour_dict_dict.items():
    tree_viz.make_legend(colour_dict)
    number_of_options = len(colour_dict)
    if number_of_options > 15:
        print("WARNING: There are more than 15 options to colour by for " + trait + ", which will make it difficult to see the differences between colours. Consider adding the trait to the taxon labels on the tree by using the flag _--label-fields_.")
```
```python,name="show_legend",echo=False,results='raw'
for i, trait in enumerate(colour_dict_dict.keys()):
    print(f"{trait}\n")
    print(f"![]({figdir}/{name_stem}_make_legend_{i+1}.png)")
    print("\n")
```

```python, name="make_lineage_bars", echo=False, include=False, figure=False
tree_to_trait_fig, trait_present = tree_viz.describe_traits(full_tax_dict, node_summary_option, query_dict)
```

```python, name="show_trees", echo=False, results='raw'

    for i in range(1,overall_tree_number+1):
        tree_name = f"Tree {i}"
        lookup = f"{tree_name_stem}_{i}"
        print(f"### {tree_name}\n")
        if len(tree_to_tip[lookup]) == 1:
            print(f"{len(tree_to_tip[lookup])} sequence of interest")
        else:
            print(f"{len(tree_to_tip[lookup])} sequences of interest")
        print("   ")
        print(f"![]({figdir}/{name_stem}_make_trees_{(i*2)-1}.png)")
        print(f"![]({figdir}/{name_stem}_make_trees_{i*2}.png)")

        print("### " + node_summary_option)
        if len(trait_present[lookup]) > 2:
            print(f'\n<center>\n<img src="{figdir}/{name_stem}_make_lineage_bars_{tree_to_trait_fig[lookup]}.png" width=70% />\n</center>\n')
        else:
            trait_values = trait_present[lookup]
            for i,v in trait_values.items():
                print(f" - {i} ({v} sequences)") 

```

```python, name="Tree error checking", echo=False, results='raw'
if too_tall_trees != []:
    for tree in too_tall_trees:
        print("Tree" + str(tree) + " is too large to be rendered here.")
```

### SNPs found in sequences of interest

```python, name="genome graph", echo=False, results='raw'
print(f"![]({figdir}/genome_graph.png)")
```

### Software versions

This report was made using:

```python, name='software versions', echo=False, results='raw'

import platform


print("Python " + platform.python_version())
print("Matplotlib version " + matplotlib.__version__)
print("Pandas version " + pd.__version__)
print("Tabulate version " + tabulate.__version__)
print("CSV version " + csv.__version__)
print("Numpy version " + np.__version__)
print("Scipy version " + sp.__version__)
print("Baltic")


```

This report was generated by llama.

```python, name="footer", echo=False, results='raw'
print('<img src="' + figdir + '/footer.png" alt="drawing" style="width:80px;"/>')
```
